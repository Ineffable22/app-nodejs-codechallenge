scalar Date

input NewTransaction {
  accountExternalIdDebit: String!,
  accountExternalIdCredit: String!,
  tranferTypeId: Int!,
  value: Int!
}

type Status {
    id: Int,
    transactionId: Int,
    status: String,
    createdAt: Date,
}

input UpdateTransaction {
    id: Int!
    statusArray: String!,
}

type TransactionName {
    name: String!
}

type Response {
  transactionExternalId: Int!
  transactionType: TransactionName!
  transactionStatus: TransactionName!
  value: Int!
  createdAt: Date
}

type TransactionDB {
    id: Int
    accountExternalIdDebit: String!
    accountExternalIdCredit: String!
    tranferTypeId: Int!
    value: Int!
    statusArray: [Status]
    createdAt: Date
    updateAt: Date
}


type Query {
    transactions: [TransactionDB]!
    transaction(id: ID!): TransactionDB
}

type Mutation {
    createTransaction(input: NewTransaction): Response
    updateTransaction(input: UpdateTransaction): TransactionDB
    deleteTransaction(id: ID): TransactionDB
}
